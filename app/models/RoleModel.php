<?php

declare(strict_types=1);

namespace Pbackbone\Model;

/**
 * TypeModel
 * @package Pbackbone\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2020-03-12, 06:15:27
 */
class RoleModel extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(column="id", type="integer", nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(column="name", type="string", length=100, nullable=true, allow_empty_string=true)
     */
    protected $name;

    /**
     *
     * @var string
     * @Column(column="description", type="string", nullable=true, allow_empty_string=true)
     */
    protected $description;

    /**
     *
     * @var string
     * @Column(column="is_active", type="string", length='yes','no', nullable=true)
     */
    protected $isActive;

    /**
     *
     * @var string
     * @Column(column="created_at", type="string", nullable=true)
     */
    protected $createdAt;

    /**
     *
     * @var string
     * @Column(column="updated_at", type="string", nullable=true)
     */
    protected $updatedAt;


    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return RoleModel
     */
    public function setId(int $id): RoleModel
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return RoleModel
     */
    public function setName(string $name): RoleModel
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field description
     *
     * @param string $description
     * @return RoleModel
     */
    public function setDescription(string $description): RoleModel
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Method to set the value of field is_active
     *
     * @param string $isActive
     * @return RoleModel
     */
    public function setIsActive(string $isActive): RoleModel
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Method to set the value of field created_at
     *
     * @param string $createdAt
     * @return RoleModel
     */
    public function setCreatedAt(string $createdAt): RoleModel
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Method to set the value of field updated_at
     *
     * @param string $updatedAt
     * @return RoleModel
     */
    public function setUpdatedAt(string $updatedAt): RoleModel
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }


    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId(): int
    {
        return (int) $this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName(): string
    {
        return (string) $this->name;
    }

    /**
     * Returns the value of field description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return (string) $this->description;
    }

    /**
     * Returns the value of field isActive
     *
     * @return string
     */
    public function getIsActive(): string
    {
        return (string) $this->isActive;
    }

    /**
     * Returns the value of field createdAt
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return (string) $this->createdAt;
    }

    /**
     * Returns the value of field updatedAt
     *
     * @return string
     */
    public function getUpdatedAt(): string
    {
        return (string) $this->updatedAt;
    }


    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        // $this->setSchema("phalcon-backbone");
        $this->setSource("role");

        $this->addBehavior(
            new \Phalcon\Mvc\Model\Behavior\Timestampable(
                [
                    'beforeCreate' => [
                        'field'  => 'createdAt',
                        'format' => 'Y-m-d H:i:s',
                    ],
                    'beforeUpdate' => [
                        'field'  => 'updatedAt',
                        'format' => 'Y-m-d H:i:s',
                    ],
                ]
            )
        );

        // * Sets a list of attributes that must be skipped from the generated INSERT statement
        $this->skipAttributesOnCreate(
            [
                'updatedAt',
            ]
        );

        // * Sets a list of attributes that must be skipped from the generated UPDATE statement
        $this->skipAttributesOnUpdate(
            [
                'createdAt',
            ]
        );

        // * Sets if a model must use dynamic update instead of the all-field update
        $this->useDynamicUpdate(true);

        $this->hasMany(
            'id',
            '\Pbackbone\Model\UsersRoleModel',
            'roleId',
            [
                'alias' => 'usersRole',
                'reusable' => true,
                'foreignKey' => [
                    'message' => 'data still being used',
                ],
            ]
        );
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'id' => 'id',
            'name' => 'name',
            'description' => 'description',
            'is_active' => 'isActive',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt'
        ];
    }
}
